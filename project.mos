model ModelName
  options noimplicit
  uses "mmxprs"

  parameters
    n = 4                               ! numero di jobs
    m = 5                               ! numero di tools
  end-parameters

  declarations
    J = 1..n                            ! insieme dei Jobs
    J0 = J + {0}                        ! insieme dei Jobs U {0}
    J0_i = J0                           ! insieme dei Jobs - {i} [TODO: per ogni utilizzo]

    T = 1..m                            ! insieme dei Tools
    T_j : array(J) of set of integer    ! array di insiemi di Tools necessari per il Job j

    Tc_m : array(T) of integer          ! costi di montaggio tool t
    Tc_s : array(T) of integer          ! costi di smontaggio tool t

    x_ij : array(J0, J0) of mpvar       ! 1 se job 'j' segue immediatamente job 'i' - 0 altrimenti
    z_ij_m : array(J0, J0, T) of mpvar  ! 1 se tool 't' viene aggiunto nel passaggio i->j [TODO: controllare grandeza T]
    y_ij_m : array(J0, J0, T) of mpvar  ! 1 se tool 't' viene lasciato nel passaggio i->j [TODO: controllare grandeza T]

    mintime : linctr
  end-declarations

  Tc_m :: [3, 4, 2, 5, 7]
  Tc_s :: [6, 4, 2, 8, 2]

  T_j :: [{1, 3, 4, 8} ,{4, 3, 2}, {3, 5, 2, 1}, {2, 4, 7}]

  ! Riassunto dati iniziali problema
  write("\n- Insieme dei Jobs 'J': ")
    forall(j in J)
      write(j, " ")
  write("\n- Insieme dei Jobs 'J0': ")
    forall(j in J0)
      write(j, " ")
  write("\n- Insieme dei Tools per:")
  forall(j in J)
    write("\n\tJob ", j, ": ", T_j(j))
  write("\n- Costi di montaggio:")
  forall(t in T)
    write("\n\tTool ", t, ": ", Tc_m(t))
  write("\n- Costi di smontaggio:")
  forall(t in T)
    write("\n\tTool ", t, ": ", Tc_s(t))
end-model
